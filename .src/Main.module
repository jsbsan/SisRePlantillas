' Gambas module file


''IDEA DEL PROGRAMA
'leer el parametro 2º que es el nombre del archivo que tiene los datos del relleno: NOMBRE

'empezar a analizar el fichero:
'1 quitar todos los comentarios
'2 crea otra copia y esta si es la que va a analizar
'3 ordenes:
'origen -> indica en la siguiente linea la plantilla.svg que debe de leer
'destino -> indica donde va a guardar y con que nombre (por defecto nombre de plantilla + _NOMBRE.svg)
'subst #etiqueta#
'sustituye el texto "#etiqueta#" por el texto indicado a continuacion

'una vez ternimando la lectura del archivo, crea los .pdf y los une, dejando los .svg por si se quiere editar.

'nota:
'tambien es posible definir varios origen y destino, para trabajar con varias plantillas


Public Sub Main()
  'parametros que nos pasen

  Dim lista As New String[]
  Dim contador As Integer
  Dim argumento As String
  Dim a As Integer


  For Each argumento In Application.Args
    'añadimos todos los argumentos a un array de cadenas
    lista.add(argumento)
    ' escribo los argumentos:
    ' Print "Nº "; contador; ": "; argumento
    contador += 1
  Next

  'nota: el indice 0 es el nombre del programa .gambas
  ' el indice 1  es el parametro que nos interesa
if lista.count=1 then lista.add("-h")

  If Upper$(lista[1]) = Upper$("-h") Or Upper$(lista[1]) = Upper$("-help") Then
    'mostrar ayuda...
    Print "------------------------------"
    Print "|   Ayuda de este programa   |"
    Print "------------------------------"
    print "SRP: Sistema de rellenado de plantillas"
    print ""
    print "Uso:"
    PRINT "srp.gambas fichero.dat"
    print ""
    print "Ejemplo de archivo de datos .dat:"
    print "[origen]	../registro_incidencias.svg   <- indicamos donde esta la plantilla que vamos a rellenar"
    print "[destino]	&nombre <- para definir que el nombre de salida que será la plantillas+fichero.dat "
    print "#presa# 	Presa de El Pintado <- se sustituye '#presa#' por el texto 'Presa de El Pintado' dentro de la plantilla" 
    print 
    Quit
  Else
    procesar(lista[1])
    'procesamos el archivo que nos pasan de argumento
  Endif
print 
End

Public nombreFicheroDATOS As String


Public Sub procesar(nombrefichero As String)

  Dim contenido As String[]
  Dim contenidoSinAyuda As New String[] 'lineas sin ayuda y sin lineas en blanco
  Dim renglon As String = ""
  Dim troceado As String[]

  Dim sustituir As String 'palabra a sustituir de la plantilla, ejemplo #nombre#
  Dim restolinea As String


  Dim a As Integer 'para el for next
  '¡comprobar que exista el fichero
  If Not Exist(nombrefichero) Then
   if not exist( application.path & "/" & nombrefichero) then 
          Print "Error SRP: apertura del fichero de datos"
          print "           No existe el fichero de datos indicados (" & nombrefichero & ")"
          print "           No existe el fichero de datos indicados en este directorio (" & application.path & "/" & nombrefichero & ")"
          Quit
    else
          nombrefichero= application.path &"/"  & nombrefichero
    endif
    
  Endif

  nombreFicheroDATOS = nombrefichero

  'leer todas las lineas
  contenido = Split(file.load(nombrefichero), "\n")

  'eliminar lineas de comentarios -> las que  empiezan con '
  'y tambien las que esten vacias (solo retorno de carro)
  For a = 0 To contenido.max
    renglon = Replace(Replace(contenido[a], " ", ""), "\t", "") 'reemplazo espacios o tabuladores en la linea

    If trim(renglon) = "" Or Mid$(renglon, 1, 1) = "'" Or Mid$(renglon, 1, 2) = "/*" Or Mid$(renglon, 1, 2) = "//"  Then
      'no añadir, es una linea de ayuda o vacia.
    Else
      'añado el contenido para procesarlo
      contenidoSinAyuda.add(contenido[a])
      PRINT "Sin comentarios (";a;"): ";CONTENIDO[A]
    Endif

  Next


  '*************************************************************************
  'procesar lineas que son comandos: [origen] [destino] o sustitucion #XXXX#
  '*************************************************************************


  For a = 0 To contenidoSinAyuda.max
    troceado = Split(contenidoSinAyuda[a], "\t")

    If troceado.count > 1 Then
      Select Case troceado[0]
        Case "[origen]"
          activarFinFicheroAnterior()
          procesarOrigen(troceado[1])
        Case "[destino]"
          procesarDestino(troceado[1])
        Case Else
          sustituir = troceado[0]
          troceado.delete(0)
          restolinea = troceado.join("\t")
          procesarSustitucion(sustituir, restolinea)
      End Select
    Endif

  Next


  activarFinFicheroAnterior()

End

'..........................
'    procesar fichero de datos y añadirlos a la plantilla (nuevo .svg)
'..........................


Public ficheroAbierto As Boolean = False 'inicialmente no hay ningun fichero abierto
Public destinoFichero As String = ""
Public ContenidoActualSVG As String 'contenido de de la plantilla
Public FicheroPlantilla As String 'nombre del fichero de plantilla
Public nombrefinal As String 'nombre que tendrá el fichero de destino .svg


'..........................
'    procesar reemplazos
'..........................
Public Sub procesarSustitucion(palabra As String, restolineas As String)
 
 print "-> Sustituir: ",palabra,restolineas
  ContenidoActualSVG = Replace$(ContenidoActualSVG, palabra, restolineas)
  Print "*"; 'escribo en la consola un "*" para indicar proceso realizado

End


'..........................
'    procesar nuevo archivo
'..........................


Public Sub procesarOrigen(nombre As String)
  'cerrar el anterior y convertir en pdf

  If ficheroAbierto = True Then
    activarFinFicheroAnterior()
  Endif

  ficheroAbierto = True 'informo a la aplicacion
  print "(ProcesandoOrigen) Fichero abierto:",ficheroAbierto
  
  nombre=comprobarRutaFichero(nombre)
  
try  ContenidoActualSVG = file.load(nombre) 'carga la plantilla

if error then 
print ""
  print "Error:"
  print "   Error al intentar leer el archivo de plantilla SVG: " & nombre
  quit
endif

  FicheroPlantilla = file.Basename(nombre) 'solo el nombre sin extensión.

End

public function comprobarRutaFichero(nombre as string) as string
  dim  composicion as string[]
  print ""
  print ""
  print "paso 1:";nombre
  if mid$(nombre,1,2)="./" then nombre= application.path & mid$(nombre,2,len(nombre))
  print "paso 2:";nombre
  if mid$(nombre,1,3)="../" then  
  
   composicion=split(application.path,"/")
   composicion.delete(composicion.count-1)

   
  nombre= composicion.join("/") &  RTrim$(mid$(nombre,3,len(nombre)))
    print "paso 3:";nombre
  endif
  
  if not exist(nombre) then 
     nombre= application.path & "/" & nombre
     print "paso 4:";nombre
  endif
  
  print "paso 5:";nombre
  print ""
  return nombre
end
  





Public Sub procesarDestino(nombre As String)

  Dim nombrefichero As String

  'comprobar nombre final del fichero
  If upper$(trim(nombre)) = upper$("&nombre") Then
    nombrefinal = application.path & "/" & file.Basename(nombreFicheroDATOS) & "_" & file.basename(FicheroPlantilla) & ".svg"
  Else
    nombrefinal = application.path & "/" & nombreFicheroDATOS & ".svg"
  Endif



print "Fichero se guardara en:"; nombrefinal
  
print ""
End





Public Sub activarFinFicheroAnterior()
  'destino ya esta definida
  print 
print "(activarFinFicheroAnterior) Fichero abierto:",ficheroAbierto

  If ficheroAbierto = True Then
    print ""
    print "Fichero Abierto, guardando contenido en: ";nombrefinal
    'hay que guardar los datos
    file.save(nombrefinal, ContenidoActualSVG)
    wait 0.05
    ContenidoActualSVG = ""
    ficheroAbierto = False
    'generar pdf
    Exec ["inkscape", nombrefinal, "--export-dpi=" & Str$(300), "--export-png", Replace(nombrefinal, ".svg", ".png")]
  Endif

End
