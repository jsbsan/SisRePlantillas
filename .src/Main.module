' Gambas module file


''IDEA DEL PROGRAMA
'leer el parametro 2º que es el nombre del archivo que tiene los datos del relleno: NOMBRE

'empezar a analizar el fichero:
'1 quitar todos los comentarios
'2 crea otra copia y esta si es la que va a analizar
'3 ordenes:
'origen -> indica en la siguiente linea la plantilla.svg que debe de leer
'destino -> indica donde va a guardar y con que nombre (por defecto nombre de plantilla + _NOMBRE.svg)
'subst #etiqueta#
'sustituye el texto "#etiqueta#" por el texto indicado a continuacion

'una vez ternimando la lectura del archivo, crea los .pdf y los une, dejando los .svg por si se quiere editar.

'nota:
'tambien es posible definir varios origen y destino, para trabajar con varias plantillas


Public Sub Main()
  'parametros que nos pasen

  Dim lista As New String[]
  Dim contador As Integer
  Dim argumento As String

  Print pwd()

  For Each argumento In Application.Args
    'añadimos todos los argumentos a un array de cadenas
    lista.add(argumento)
    ' escribo los argumentos:
    ' Print "Nº "; contador; ": "; argumento
    contador += 1
  Next

  'nota: el indice 0 es el nombre del programa .gambas
  ' el indice 1  es el parametro que nos interesa
  If lista.count = 1 Then lista.add("-h")

  If Upper$(lista[1]) = Upper$("-h") Or Upper$(lista[1]) = Upper$("-help") Then
    'mostrar ayuda...
    Print "------------------------------"
    Print "|   Ayuda de este programa   |"
    Print "------------------------------"
    Print "SRP: Sistema de rellenado de plantillas"
    Print "Version: " & Application.Version

    Print "Uso:"
    Print "srp.gambas fichero.dat"
    Print ""
    Print "Ejemplo de archivo de datos .dat:"
    Print "[origen]	../registro_incidencias.svg   <- indicamos donde esta la plantilla que vamos a rellenar"
    Print "[destino]	&nombre <- para definir que el nombre de salida que será la plantillas+fichero.dat "
    Print "#presa# 	Presa de El Pintado <- se sustituye '#presa#' por el texto 'Presa de El Pintado' dentro de la plantilla"
    Print
    Quit
  Else
    procesar(lista[1])
    'procesamos el archivo que nos pasan de argumento
  Endif
  Print

End

Public nombreFicheroDATOS As String


Public Sub procesar(nombrefichero As String)

  Dim contenido As String[]
  Dim contenidoSinAyuda As New String[] 'lineas sin ayuda y sin lineas en blanco
  Dim renglon As String = ""
  Dim troceado As String[]

  Dim sustituir As String 'palabra a sustituir de la plantilla, ejemplo #nombre#
  Dim restolinea As String


  Dim a As Integer 'para el for next
  '¡comprobar que exista el fichero
  If Not Exist(nombrefichero) Then
    If Not Exist(pwd() & "/" & nombrefichero) Then
      Print "Error SRP: apertura del fichero de datos"
      Print "           No existe el fichero de datos indicados (" & nombrefichero & ")"
      Print "           No existe el fichero de datos indicados en este directorio (" & pwd() & "/" & nombrefichero & ")"
      Quit
    Else
      nombrefichero = pwd() & "/" & nombrefichero
    Endif

  Endif

  nombreFicheroDATOS = nombrefichero

  'leer todas las lineas
  contenido = Split(file.load(nombrefichero), "\n")

  'eliminar lineas de comentarios -> las que  empiezan con '
  'y tambien las que esten vacias (solo retorno de carro)
  For a = 0 To contenido.max
    renglon = Replace(Replace(contenido[a], " ", ""), "\t", "") 'reemplazo espacios o tabuladores en la linea

    If Trim(renglon) = "" Or Mid$(renglon, 1, 1) = "'" Or Mid$(renglon, 1, 2) = "/*" Or Mid$(renglon, 1, 2) = "//" Then
      'no añadir, es una linea de ayuda o vacia.
    Else
      'añado el contenido para procesarlo
      contenidoSinAyuda.add(contenido[a])
      Print "Sin comentarios ("; a; "): "; CONTENIDO[A]
    Endif

  Next


  '*************************************************************************
  'procesar lineas que son comandos: [origen] [destino] o sustitucion #XXXX#
  '*************************************************************************


  For a = 0 To contenidoSinAyuda.max
    troceado = Split(contenidoSinAyuda[a], "\t")

    If troceado.count = 0 Then troceado = contenidoSinAyuda[a]


    If troceado.count > 0 Then

      '********************
      'analizador de lineas
      '********************
      Select Case troceado[0]
        Case "[origen]"
          activarFinFicheroAnterior()
          procesarOrigen(troceado[1])
        Case "[destino]"
          procesarDestino(troceado[1])
        Case "[imagen]"
          procesarImagen(troceado[1])
        Case Else
          sustituir = troceado[0]
          troceado.delete(0)
          restolinea = troceado.join("\t")
          procesarSustitucion(sustituir, restolinea)
      End Select
    Endif

  Next


  activarFinFicheroAnterior()

End

'..........................
'    procesar fichero de datos y añadirlos a la plantilla (nuevo .svg)
'..........................


Public ficheroAbierto As Boolean = False 'inicialmente no hay ningun fichero abierto
Public destinoFichero As String = ""
Public ContenidoActualSVG As String 'contenido de de la plantilla
Public FicheroPlantilla As String 'nombre del fichero de plantilla
Public nombrefinal As String 'nombre que tendrá el fichero de destino .svg


'..........................
'    procesar reemplazos
'..........................
Public Sub procesarSustitucion(palabra As String, restolineas As String)

  Print "-> Sustituir: ", palabra, restolineas
  palabra = Trim(palabra) 'quito espacios en blanco de la palabra a sustituir
  ContenidoActualSVG = Replace$(ContenidoActualSVG, palabra, restolineas)
  Print "*"; 'escribo en la consola un "*" para indicar proceso realizado

End


'..........................
'    procesar nuevo archivo
'..........................


Public Sub procesarOrigen(nombre As String)
  'cerrar el anterior y convertir en pdf

  If ficheroAbierto = True Then
    activarFinFicheroAnterior()
  Endif

  ficheroAbierto = True 'informo a la aplicacion
  Print "(ProcesandoOrigen) Fichero abierto:", ficheroAbierto

  nombre = comprobarRutaFichero(nombre)

  Try ContenidoActualSVG = file.load(nombre) 'carga la plantilla

  If Error Then
    Print ""
    Print "Error:"
    Print "   Error al intentar leer el archivo de plantilla SVG: " & nombre
    Quit
  Endif

  FicheroPlantilla = file.Basename(nombre) 'solo el nombre sin extensión.

End

Public Function comprobarRutaFichero(nombre As String) As String

  Dim composicion As String[]

  Print ""
  Print ""
  Print "paso 1:"; nombre
  If Mid$(nombre, 1, 2) = "./" Then nombre = pwd() & "/" & Mid$(nombre, 2, Len(nombre))
  Print "paso 2:"; nombre
  If Mid$(nombre, 1, 3) = "../" Then

    composicion = Split(pwd(), "/")
    composicion.delete(composicion.count - 1)


    nombre = composicion.join("/") & "/" & RTrim$(Mid$(nombre, 4, Len(nombre)))
    Print "paso 3:"; nombre
  Endif

  If Not Exist(nombre) Then
    nombre = pwd() & "/" & nombre
    Print "paso 4:"; nombre
  Endif

  Print "paso 5:"; nombre
  Print ""
  Return nombre

End






Public Sub procesarDestino(nombre As String)


  'comprobar nombre final del fichero
  If Upper$(Trim(nombre)) = Upper$("&nombre") Then
    nombrefinal = pwd() & "/" & file.Basename(nombreFicheroDATOS) & "_" & file.basename(FicheroPlantilla) & ".svg"
  Else
    nombrefinal = pwd() & "/" & nombreFicheroDATOS & ".svg"
  Endif

  Print "Fichero se guardara en:"; nombrefinal

  Print ""

End


Public Sub procesarImagen(nombre As String)
  'pendiente de procesar
  '   Print "-> Sustituir: ", palabra, restolineas
  ' palabra = Trim(palabra) 'quito espacios en blanco de la palabra a sustituir
  ' ContenidoActualSVG = Replace$(ContenidoActualSVG, palabra, restolineas)
  ' Print "*"; 'escribo en la consola un "*" para indicar proceso realizado
  '

End






Public Sub activarFinFicheroAnterior()
  'destino ya esta definida

  Print
  Print "(activarFinFicheroAnterior) Fichero abierto:", ficheroAbierto

  If ficheroAbierto = True Then
    Print ""
    Print "Fichero Abierto, guardando contenido en: "; nombrefinal
    'hay que guardar los datos
    file.save(nombrefinal, ContenidoActualSVG)
    Wait 0.05
    ContenidoActualSVG = ""
    ficheroAbierto = False
    'generar pdf
    Exec ["inkscape", nombrefinal, "--export-dpi=" & Str$(300), "--export-png", Replace(nombrefinal, ".svg", ".png")]
  Endif

End

Public Function pwd() As String ''retorna la ruta actual donde se esta ejecutando el programa

  Dim ruta As String

  Shell "pwd" To ruta
  Return Replace(ruta, "\n", "")

End



